from flask import Flask, send_from_directory
from flask_login import LoginManager
from flask_socketio import SocketIO, send
import firebase_admin

from firebase_admin import credentials
from firebase_admin import firestore
import pyrebase

from cryptography.fernet import Fernet
import os
import json
from datetime import datetime

from dotenv import load_dotenv

# Load the .env file
load_dotenv()

# Access the environment variables
firebase_config = {
    "apiKey": os.getenv("FIREBASE_API_KEY"),
    "authDomain": os.getenv("FIREBASE_AUTH_DOMAIN"),
    "databaseURL": os.getenv("FIREBASE_DATABASE_URL"),
    "projectId": os.getenv("FIREBASE_PROJECT_ID"),
    "storageBucket": os.getenv("FIREBASE_STORAGE_BUCKET"),
    "messagingSenderId": os.getenv("FIREBASE_MESSAGING_SENDER_ID"),
    "appId": os.getenv("FIREBASE_APP_ID"),
    "measurementId": os.getenv("FIREBASE_MEASUREMENT_ID"),
}

admin_config = {
    "type": os.getenv("ADMIN_TYPE"),
    "project_id": os.getenv("ADMIN_PROJECT_ID"),
    "private_key_id": os.getenv("ADMIN_PRIVATE_KEY_ID"),
    "private_key": os.getenv("ADMIN_PRIVATE_KEY").replace("\\n", "\n"), 
    "client_email": os.getenv("ADMIN_CLIENT_EMAIL"),
    "client_id": os.getenv("ADMIN_CLIENT_ID"),
    "auth_uri": os.getenv("ADMIN_AUTH_URI"),
    "token_uri": os.getenv("ADMIN_TOKEN_URI"),
    "auth_provider_x509_cert_url": os.getenv("ADMIN_AUTH_PROVIDER_CERT_URL"),
    "client_x509_cert_url": os.getenv("ADMIN_CLIENT_CERT_URL"),
    "universe_domain": os.getenv("ADMIN_UNIVERSE_DOMAIN"),
}


# fernet = Fernet(os.getenv("FERNET_KEY"))

# with open(
#         os.path.join(os.path.dirname(__file__),
#                      'config/encrypted_admin_config.txt')) as f:
#     encrypted_admin_config = f.read()
#     admin_config = json.loads(fernet.decrypt(encrypted_admin_config).decode())

# with open(
#         os.path.join(os.path.dirname(__file__),
#                      'config/encrypted_firebase_config.txt')) as f:
#     encrypted_firebase_config = f.read()
#     firebase_config = json.loads(
#         fernet.decrypt(encrypted_firebase_config).decode())



# with open(
#         os.path.join(os.path.dirname(__file__),
#                      'config/encrypted_firebase_config.json')) as f:
#     encrypted_firebase_config = f.read()
#     firebase_config = json.load((encrypted_firebase_config))

# with open(
#         os.path.join(os.path.dirname(__file__),
#                      'config/encrypted_admin_config.json')) as f:
#     encrypted_admin_config = f.read()
#     firebase_config = json.load((encrypted_admin_config))




app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")

app.config['SECRET_KEY'] = os.getenv("SQL_ACLCHEMY_KEY")
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'

cred = credentials.Certificate(admin_config)

firebase_admin.initialize_app(
    cred, {'storageBucket': 'alumni-portal-70263.appspot.com'})
pyrebase = pyrebase.initialize_app(firebase_config)

db_fire = firestore.client()
login_manager = LoginManager(app)
login_manager.login_view = 'authentication.login'
login_manager.login_message_category = 'info'

from ait.views import authentication, chat, connection, error_handling, home, post, profile

app.register_blueprint(authentication.authentication)
app.register_blueprint(chat.chat)
app.register_blueprint(connection.connect)
app.register_blueprint(error_handling.error_handling)
app.register_blueprint(home.home)
app.register_blueprint(post.post)
app.register_blueprint(profile.profile)
